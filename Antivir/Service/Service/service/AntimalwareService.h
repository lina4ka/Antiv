#pragma once
#include "Service.h"
#include "AntimalwareService.h"
#include <memory>
#include <vector>
#include <thread>
#include "IO_.h"
#include "../infoStorage.h"
#include "malwaredata.h"
#include "../Scanner.h"
#include "../Schedule.h"
#include "../Monitoring.h"
namespace Antimalware::ServiceApp
{
    class AntimalwareService : public ServiceLib::ServiceManagement::Service
    {
    public:
        AntimalwareService()
            : ServiceLib::ServiceManagement::Service(u"NadyezhniyAntimalwareService")
        { }

    protected:
        virtual void DoWork() override;
        virtual int DoStop() override;
        virtual int Init() override;
    private:
        bool onlyOnce = true;
        
        pair<HANDLE,HANDLE> waitConnection();
        vector<HANDLE> backList;
        vector<HANDLE> frontList;
        void work(std::pair<HANDLE, HANDLE> pipes);
        void toDO(Sender answer, msg Message);
        shared_ptr<infoStorage> storage;
        shared_ptr<MalwareData> malwareData;
        shared_ptr<Scanner> scanner;
        shared_ptr < Schedule > schedule;
        shared_ptr < Monitoring > monitor;
        void monitorBackGround();
        void scheduleBackGround();
        void sendInitial(Sender answer);

    };

    class AntimalwareServiceFactory : public ServiceLib::ServiceManagement::IServiceFactory
    {
    public:
        AntimalwareServiceFactory();

        virtual std::unique_ptr<ServiceLib::ServiceManagement::Service> Create() override;

    
    };
}
